<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;
use Drupal\purchasing\Model\ProcurementMethod;

/**
 * Implementation of hook_preprocess_HOOK().
 */
function purchasing_preprocess_pager(&$variables, $hook) {
  if (in_array('pager__images__block_1', $variables['pager']['#theme'])) {
    if (isset($variables['items']['first'])) {
      unset($variables['items']['first']);
    }

    if (isset($variables['items']['last'])) {
      unset($variables['items']['last']);
    }
  }
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function purchasing_parity_preprocess_node(&$variables, $hook) {
  if ($variables['view_mode'] == 'search_result') {
    switch ($variables['node']->bundle()) {
      case 'priced_line_item':
        $result_label = 'Line Item';
        break;
      case 'discounted_line_item':
        $result_label = 'Line Item';
        break;
      case 'partner_line_item':
        $result_label = 'Line Item';
        break;
      case 'award':
        $result_label = 'Award';
        break;
      case 'contract':
        $result_label = 'Procurement';
        break;
      case 'solicitation':
        $result_label = 'Procurement';
        break;
      case 'quote':
        $result_label = 'Procurement';
        break;
      case 'vendor':
        $result_label = 'Vendor';
        break;
      default:
        $result_label = 'Page';
        break;
    }

    $variables['result_label'] = $result_label;
  }
}

/**
 * Implementation of hook_theme_suggestions_HOOK_alter().
 */
function purchasing_parity_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $suggestions[] = vsprintf('taxonomy_term__%s__%s', [
    $variables['elements']['#taxonomy_term']->bundle(),
    $variables['elements']['#view_mode'],
  ]);
}

/**
 * Implementation of hook_preprocess_taxonomy_term().
 */
function purchasing_parity_preprocess_taxonomy_term(&$variables) {
  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $variables['term'];

  if ($variables['view_mode'] == 'awards' && $term->bundle() == 'categories') {
    $now = (new DrupalDateTime())->format(DATETIME_DATE_STORAGE_FORMAT);

    $query = \Drupal::database()->select('node', 'n');
    $query->addField('n', 'nid');

    $query->leftJoin('node_field_data',                'fd',  'n.nid = fd.nid');
    $query->leftJoin('node__field_dates_effective',    'fde', 'n.nid = fde.entity_id');
    $query->leftJoin('node__field_category',           'fc',  'n.nid = fc.entity_id');
    $query->leftJoin('node__field_procurement_method', 'fpm', 'n.nid = fpm.field_procurement_method_target_id');

    $query->condition('n.type', ['solicitation', 'contract', 'quote'], 'IN');
    $query->condition('fde.field_dates_effective_end_value', $now, '>=');
    $query->condition('fc.field_category_target_id', $term->id());
    $query->condition('fd.status', 1);
    $query->condition('fpm.bundle', NULL, 'IS NOT NULL');

    $result = $query->execute();
    $nids = $result->fetchAllAssoc('nid');
    $nodes = Node::loadMultiple(array_keys($nids));

    $variables['procurements'] = $nodes;
  }
}
