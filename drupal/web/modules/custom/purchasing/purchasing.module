<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\Views;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\node\NodeInterface;
use Drupal\purchasing\Model\ProcurementMethod;
use Drupal\Core\Url;

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Inline Entity Fields does not have configuration settings for it's
 * entity autocomplete field. So I am configuring it here to use a view for
 * filtering.
 */
function purchasing_inline_entity_form_reference_form_alter(&$reference_form, &$form_state) {
  if ($reference_form['#parents'][0] == 'field_procurement_method') {
    $reference_form['entity_id']['#selection_settings'] = [
      'view' => [
        'view_name' => 'procurement_filter',
        'display_name' => 'entity_reference_1',
        'arguments' => [],
      ],
      'match_operator' => 'CONTAINS',
    ];

    $reference_form['entity_id']['#selection_handler'] = 'purchasing';
  }
}

/**
 * Implementation of hook_preprocess_field().
 */
function purchasing_preprocess_field(&$variables) {
  if ($variables['field_name'] == 'field_price') {
    $entity = $variables['element']['#object'];

    switch ($entity->field_per->value) {
      case 'hour':
        $variables['items'][0]['content']['#suffix'] = '<span class="suffix">/hr</span>';
        break;
    }
  }
}

/**
 * Implementation for hook_inline_entity_form_entity_form_alter().
 */
function purchasing_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'node' && $entity_form['#bundle'] == 'vendor') {
    $entity_form['#attached']['library'][] = 'purchasing/inline_vendor';
  }
}

/**
 * Implementation of hook_block_access()
 */
function purchasing_block_access(Block $block, $operation, AccountInterface $account) {
  if ($operation != 'view') {
    return AccessResult::neutral();
  }

  $ids = [
    'discount_matrix_block',
    'views_block:line_items_by_procurement_method-block_1',
  ];

  if (!in_array($block->getPluginId(), $ids)) {
    return AccessResult::neutral();
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  try {
    $procurementMethod = new ProcurementMethod($node);
  } catch (\InvalidArgumentException $e) {
    return AccessResult::neutral()->addCacheableDependency($block);
  } catch (\TypeError $e) {
    return AccessResult::neutral()->addCacheableDependency($block);
  }

  if (empty($procurementMethod->getAwardIds())) {
    return AccessResult::forbidden()->addCacheableDependency($block);
  }

  $num_awards = count($procurementMethod->getDiscountAwardIds());
  $num_priced_line_items = count($procurementMethod->getPricedLineItemIds());

  return AccessResult::forbiddenIf(
    ($block->getPluginId() == $ids[0] && $num_awards > 8) ||
    ($block->getPluginId() == $ids[1] && $num_awards <= 8 && !$num_priced_line_items)
  )->addCacheableDependency($block);
}

/**
 * Implementation of hook_proprocess_HOOK().
 */
function purchasing_preprocess_node(&$variables) {
  if ($variables['view_mode'] === 'full_awarded') {
    // Make the full_awarded view mode act like a full page view mode.
    $variables['page'] = TRUE;
  }
}

/**
 * Implementations of hook_entity_view_mode_alter().
 */
function purchasing_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($view_mode === 'full' && $entity->getEntityTypeId() == 'node' && $entity->bundle() == 'solicitation') {
    $nids = \Drupal::entityQuery('node')
      ->condition('type', 'award')
      ->condition('status', 1)
      ->condition('field_procurement_method.target_id', $entity->id())
      ->execute();

    if (!empty($nids)) {
      $view_mode = 'full_awarded';
    }
  }
}

/**
 * Helper function to render a view.
 *
 * @param string $name
 *   The view machine name.
 * @param string $display
 *   The display machine name.
 * @param array $args
 *   The arguments to pass to the view.
 * @param boolean $allow_empty
 *   Should we render if the view contains no results?
 * @param boolean $render
 *   Should we render the results or send a renderable array,
 * @return NULL|array|string
 *   Array if $render is false. String if $render is true. NULL if there is
 *   no view or the view has no results and you did not choose to render
 *   the empty view.
 */
function _purchasing_render_view($name, $display, array $args = [], $allow_empty = FALSE, $render = FALSE) {
  $view = Views::getView($name);
  if (is_object($view)) {
    $view->setArguments($args);
    $view->setDisplay($display);
    $view->preExecute();
    $view->execute();

    if (!$view->total_rows && !$allow_empty) {
      return;
    }

    if ($render) {
      $root = $view->render();
      return \Drupal::service('renderer')->renderRoot($root);
    } else {
      $view->buildRenderable($display, $args, FALSE);
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function purchasing_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['#fieldgroups']['group_line_items'])) {
    $id      = $form_state->getFormObject()->getEntity()->id();
    $view    = 'line_items_by_award_form';
    $display = 'award_form';
    $content = _purchasing_render_view($view, $display, [$id], TRUE, TRUE);

    if ($content) {
      $form['line_items'] = ['#type' => 'markup', '#markup' => $content];
      $form['line_item_actions'] = [
        '#type' => 'container',
        '#attributes' => ['class' => 'line-item-actions'],
      ];
      $form['line_item_actions']['add'] = [
        '#type' => 'dropbutton',
        '#links' => [
          'priced' => [
            'title' => t('Add a Priced Line Item'),
            'url' => Url::fromRoute('node.add', [
              'node_type' => 'priced_line_item',
              'award' => $id,
              'destination' => Url::fromRoute('entity.node.edit_form', ['node' => $id])->toString(),
            ]),
          ],
          'discount' => [
            'title' => t('Add a Discounted Line Item'),
            'url' => Url::fromRoute('node.add', [
              'node_type' => 'discounted_line_item',
              'award' => $id,
              'destination' => Url::fromRoute('entity.node.edit_form', ['node' => $id])->toString(),
            ]),
          ],
        ],
      ];
      $form['line_item_actions']['import'] = [
        '#type' => 'dropbutton',
        '#links' => [
          'priced' => [
            'title' => t('Import Priced Line Items'),
            'url' => Url::fromRoute('purchasing.import.priced_line_item', [
              'destination' => Url::fromRoute('entity.node.edit_form', ['node' => $id])->toString(),
            ]),
          ],
          'discount' => [
            'title' => t('Import Discounted Line Items'),
            'url' => Url::fromRoute('purchasing.import.discounted_line_item', [
              'destination' => Url::fromRoute('entity.node.edit_form', ['node' => $id])->toString(),
            ]),
          ],
        ],
      ];

      $form['#fieldgroups']['group_line_items']->children[] = 'line_items';
      $form['#fieldgroups']['group_line_items']->children[] = 'line_item_actions';
      $form['#group_children']['line_items'] = 'group_line_items';
      $form['#group_children']['line_item_actions'] = 'group_line_items';
    }
  }

  if (!empty($form['#fieldgroups']['group_awards'])) {
    $args    = [$form_state->getFormObject()->getEntity()->id()];
    $view    = 'awards_by_procurement_method_form';
    $display = 'procurement_form';
    $content = _purchasing_render_view($view, $display, $args, TRUE, TRUE);

    if ($content) {
      $form['awards'] = ['#type' => 'markup', '#markup' => $content];
      $form['#fieldgroups']['group_awards']->children = 'awards';
      $form['#group_children']['awards'] = 'group_awards';
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function purchasing_form_node_priced_line_item_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['price'] = [
    '#type' => 'container',
    '#weight' => $form['field_price']['#weight'],
    '#attributes' => ['class' => 'price'],
  ];

  $form['field_price']['#group'] = 'price';
  $form['field_per']['#group'] = 'price';

  $form['#attached']['library'][] = 'purchasing/price';
}

/**
 * Implementation of hook_entity_extra_field_info().
 */
function purchasing_entity_extra_field_info() {
  $extra = [];

  $extra['taxonomy_term']['categories']['display']['awarded_procurements'] = [
    'label'       => t('Awarded Procurements'),
    'description' => t('Procurements that have been awarded'),
    'weight'      => 100,
    'visible'     => TRUE,
  ];

  $extra['taxonomy_term']['categories']['display']['open_solicitations'] = [
    'label'       => t('Open Solicitations'),
    'description' => t('Solicitations that have not been awarded'),
    'weight'      => 100,
    'visible'     => TRUE,
  ];

  $awards = [
    'label'       => t('Awards'),
    'description' => t('Awards'),
    'weight'      => 100,
    'visible'     => TRUE,
  ];

  $extra['node']['vendor']['display']['awards_by_vendor'] = $awards;

  foreach (['solicitation', 'contract', 'quote'] as $bundle) {
    $extra['node'][$bundle]['display']['awards'] = $awards;
  }

  foreach (['notes', 'ordering_instructions', 'reference_number', 'vendor'] as $field_name) {
    $field = ['weight' => 100, 'visible' => TRUE];
    $field['label'] = $field['description'] = ucwords(str_replace('_', ' ', $field_name));

    foreach (['partner', 'discounted', 'priced'] as $line_item_type) {
      $extra['node']["{$line_item_type}_line_item"]['display'][$field_name] = $field;
    }
  }

  $images = [
    'label'       => t('Image Gallery'),
    'description' => t('Image Gallery'),
    'weight'      => 100,
    'visible'     => TRUE,
  ];
  $extra['node']['priced_line_item']['display']['image_gallery']     = $images;
  $extra['node']['discounted_line_item']['display']['image_gallery'] = $images;

  return $extra;
}

/**
 * Implements hook_theme().
 */
function purchasing_theme($existing, $type, $theme, $path) {
  return [
    'discount_matrix' => [
      'variables' => [
        'matrix' => [],
      ],
    ],
    'definition_list' => [
      'variables' => [
        'list' => [],
        'label' => '',
      ],
    ],
    'view_field' => [
      'variables' => [
        'view' => [],
        'label' => '',
      ],
    ],
  ];
}

/**
 * Implementation of hook_ENITTY_TYPE_view().
 */
function purchasing_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('awards')) {
    _purchasing_view_awards($build, $entity);
  }

  if ($component = $display->getComponent('awards_by_vendor')) {
    _purchasing_view_awards_by_vendor($build, $entity, $component['weight']);
  }

  if ($display->getComponent('image_gallery')) {
    _purchasing_view_image_gallery($build, $entity);
  }

  foreach (['notes', 'ordering_instructions', 'reference_number', 'vendor'] as $field_name) {
    if ($display->getComponent($field_name)) {
      if ($entity->field_award->entity->{'field_'.$field_name}) {
        $build[$field_name] = $entity->field_award->entity->{'field_'.$field_name}->view('full');
      }
    }
  }
}

/**
 * Render a field from an award.
 *
 * @param string $field
 * @param array $build
 * @param EntityInterface $entity
 */
function _purchasing_view_award_field($field, &$build, $entity) {
  $build[$field] = $entity->field_award->entity->{'field_'.$field}->view('full');
}

/**
 * Add the awards_by_vendor view to the awards_by_vendor field.
 *
 * @param array $build
 * @param NodeInterface $entity
 */
function _purchasing_view_awards_by_vendor(array &$build, NodeInterface $entity, $weight) {
  $view = Views::getView('awards_by_vendor');
  if (is_object($view)) {
    $args = [$entity->id()];
    $view->setArguments($args);
    $view->setDisplay('block_1');
    $view->preExecute();
    $view->execute();

    if ($view->total_rows) {
      $content = $view->buildRenderable('block_1', $args, FALSE);

      $build['awards'] = [
        '#theme' => 'view_field',
        '#view' => $content,
        '#label' => t('Awards'),
        '#weight' => $weight,
      ];
    }
  }
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function purchasing_preprocess_view_field(&$variables, $hook) {
  $variables['view_name'] = $variables['view']['#name'];
}

/**
 * Add the awards_by_vendor view to the awards_by_vendor field.
 *
 * @param array $build
 * @param NodeInterface $entity
 */
function _purchasing_view_image_gallery(array &$build, NodeInterface $entity) {
  $view = Views::getView('images');
  if (is_object($view)) {
    $args = [$entity->id()];
    $view->setArguments($args);
    $view->setDisplay('block_1');
    $view->preExecute();
    $view->execute();

    if ($view->total_rows) {
      $content = $view->buildRenderable('block_1', $args, FALSE);
      $build['awards'] = [
        '#theme' => 'view_field',
        '#view' => $content,
        '#label' => t('Images'),
      ];
    }
  }
}

/**
 * Add the awards to the build.
 *
 * @param array $build
 * @param EntityInterface $entity
 */
function _purchasing_view_awards(array &$build, EntityInterface $entity) {
  $view = Views::getView('awards_by_procurement_method');
  if (is_object($view)) {
    $args = [$entity->id()];
    $view->setArguments($args);
    $view->setDisplay('block_1');
    $view->preExecute();
    $view->execute();

    if ($view->total_rows) {
      $content = $view->buildRenderable('block_1', $args, FALSE);

      $build['awards'] = [
        '#theme' => 'view_field',
        '#view' => $content,
        '#label' => t('Awarded Vendors'),
      ];
    }
  }
}

/**
 * Implementation of hook_ENITTY_TYPE_view().
 */
function purchasing_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  if ($display->getComponent('awarded_procurements')) {
    $view = Views::getView('awarded_procurements_by_category');
    if (is_object($view)) {
      $args = [$entity->id()];
      $view->setArguments($args);
      $view->setDisplay();
      $view->preExecute();
      $view->execute();

      $content = $view->buildRenderable('default', $args, FALSE);

      $build['awarded_procurements'] = $content;
    }
  }

  if ($display->getComponent('open_solicitations')) {
    $view = Views::getView('open_solicitations_by_category');
    if (is_object($view)) {
      $args = [$entity->id()];
      $view->setArguments($args);
      $view->setDisplay();
      $view->preExecute();
      $view->execute();

      $content = $view->buildRenderable('default', $args, FALSE);

      $build['open_solicitations'] = $content;
    }
  }
}
