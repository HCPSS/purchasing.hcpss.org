<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Link;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\node\NodeInterface;
use Drupal\purchasing\Model\ProcurementMethod;

/**
 * Implementation of hook_block_access()
 */
function purchasing_block_access(Block $block, $operation, AccountInterface $account) {
  if ($operation != 'view') {
    return AccessResult::neutral();
  }

  $ids = [
    'discount_matrix_block',
    'views_block:line_items_by_procurement_method-block_1',
  ];

  if (!in_array($block->getPluginId(), $ids)) {
    return AccessResult::neutral();
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  try {
    $procurementMethod = new ProcurementMethod($node);
  } catch (\InvalidArgumentException $e) {
    return AccessResult::neutral();
  } catch (\TypeError $e) {
    return AccessResult::neutral();
  }

  if (empty($procurementMethod->getAwardIds())) {
    return AccessResult::forbidden();
  }

  $num_awards = count($procurementMethod->getDiscountAwardIds());
  $num_priced_line_items = count($procurementMethod->getPricedLineItemIds());

  return AccessResult::forbiddenIf(
    ($block->getPluginId() == $ids[0] && $num_awards > 8) ||
    ($block->getPluginId() == $ids[1] && $num_awards <= 8 && !$num_priced_line_items)
  )->addCacheableDependency($block);
}

/**
 * Implementation of hook_proprocess_HOOK().
 */
function purchasing_preprocess_node(&$variables) {
  if ($variables['view_mode'] === 'full_awarded') {
    // Make the full_awarded view mode act like a full page view mode.
    $variables['page'] = TRUE;
  }
}

/**
 * Implementations of hook_entity_view_mode_alter().
 */
function purchasing_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($view_mode === 'full' && $entity->getEntityTypeId() == 'node' && $entity->bundle() == 'solicitation') {
    $nids = \Drupal::entityQuery('node')
      ->condition('type', 'award')
      ->condition('status', 1)
      ->condition('field_procurement_method.target_id', $entity->id())
      ->execute();

    if (!empty($nids)) {
      $view_mode = 'full_awarded';
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function purchasing_form_node_bid_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_award']['widget']['add_more']['add_more_button_awarded_bid']['#value'] = 'Award this Bid';
}

/**
 * Implementation of hook_entity_extra_field_info().
 */
function purchasing_entity_extra_field_info() {
  $extra = [];

  $extra['taxonomy_term']['categories']['display']['awarded_procurements'] = [
    'label'       => t('Awarded Procurements'),
    'description' => t('Procurements that have been awarded'),
    'weight'      => 100,
    'visible'     => TRUE,
  ];

  $extra['taxonomy_term']['categories']['display']['open_solicitations'] = [
    'label'       => t('Open Solicitations'),
    'description' => t('Solicitations that have not been awarded'),
    'weight'      => 100,
    'visible'     => TRUE,
  ];

  $awards = [
    'label'       => t('Awards'),
    'description' => t('Awards'),
    'weight'      => 100,
    'visible'     => TRUE,
  ];

  foreach (['solicitation', 'contract', 'quote'] as $bundle) {
    $extra['node'][$bundle]['display']['awards'] = $awards;
  }

  foreach (['notes', 'ordering_instructions', 'reference_number', 'vendor'] as $field_name) {
    $field = ['weight' => 100, 'visible' => TRUE];
    $field['label'] = $field['description'] = ucwords(str_replace('_', ' ', $field_name));

    foreach (['partner', 'discounted', 'priced'] as $line_item_type) {
      $extra['node']["{$line_item_type}_line_item"]['display'][$field_name] = $field;
    }
  }

  return $extra;
}

/**
 * Implements hook_theme().
 */
function purchasing_theme($existing, $type, $theme, $path) {
  return [
    'discount_matrix' => [
      'variables' => [
        'matrix' => [],
      ],
    ],
    'definition_list' => [
      'variables' => [
        'list' => [],
        'label' => '',
      ],
    ],
    'view_field' => [
      'variables' => [
        'view' => [],
        'label' => '',
      ],
    ],
  ];
}

/**
 * Implementation of hook_ENITTY_TYPE_view().
 */
function purchasing_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  if ($display->getComponent('awards')) {
    _purchasing_view_awards($build, $entity);
  }

  foreach (['notes', 'ordering_instructions', 'reference_number', 'vendor'] as $field_name) {
    if ($display->getComponent($field_name)) {
      if ($entity->field_award->entity->{'field_'.$field_name}) {
        $build[$field_name] = $entity->field_award->entity->{'field_'.$field_name}->view('full');
      }
    }
  }
}

function _purchasing_view_award_field($field, &$build, $entity) {
  $build[$field] = $entity->field_award->entity->{'field_'.$field}->view('full');
}

/**
 * Add the awards to the build.
 *
 * @param array $build
 * @param EntityInterface $entity
 */
function _purchasing_view_awards(array &$build, EntityInterface $entity) {
  $view = Views::getView('awards_by_procurement_method');
  if (is_object($view)) {
    $args = [$entity->id()];
    $view->setArguments($args);
    $view->setDisplay('block_1');
    $view->preExecute();
    $view->execute();

    $content = $view->buildRenderable('block_1', $args, FALSE);

    $build['awards'] = [
      '#theme' => 'view_field',
      '#view' => $content,
      '#label' => t('Awarded Vendors'),
    ];
  }
}

/**
 * Implementation of hook_ENITTY_TYPE_view().
 */
function purchasing_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  if ($display->getComponent('awarded_procurements')) {
    $view = Views::getView('awarded_procurements_by_category');
    if (is_object($view)) {
      $args = [$entity->id()];
      $view->setArguments($args);
      $view->setDisplay();
      $view->preExecute();
      $view->execute();

      $content = $view->buildRenderable('default', $args, FALSE);

      $build['awarded_procurements'] = $content;
    }
  }

  if ($display->getComponent('open_solicitations')) {
    $view = Views::getView('open_solicitations_by_category');
    if (is_object($view)) {
      $args = [$entity->id()];
      $view->setArguments($args);
      $view->setDisplay();
      $view->preExecute();
      $view->execute();

      $content = $view->buildRenderable('default', $args, FALSE);

      $build['open_solicitations'] = $content;
    }
  }
}
